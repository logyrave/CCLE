ggplot() +
geom_point(data = df, aes(x = rew.prob.diff, y = rew.mag.diff, color = factor(choice)), alpha = 0.5) +
geom_line(data = predictions, aes(x = rew.prob.diff, y = rew.mag.diff), color = "black", linetype = "dashed") +
geom_ribbon(data = predictions, aes(x = rew.prob.diff, ymin = lower, ymax = upper), alpha = 0.2, fill = "blue") +
theme_minimal() +
labs(title = "Visualization of Choices with Decision Boundary and Uncertainty",
x = "Difference in Probability (Right - Left)",
y = "Difference in Magnitude (Right - Left)",
color = "Choice") +
theme(legend.position = "right")
# Charger ggplot2 pour la visualisation
library(ggplot2)
# Définir les paramètres des deux lois normales
mu_minus <- 0  # Modèle moins
sigma_minus <- 0.5  # Faible variance
mu_plus <- 5  # Espérance positive pour le modèle plus
sigma_plus <- 2  # Variance plus grande
# Créer une séquence de valeurs Z pour les deux distributions
Z_values <- seq(-10, 15, length.out = 1000)
# Calculer les densités pour les deux modèles
density_minus <- dnorm(Z_values, mean = mu_minus, sd = sigma_minus)
density_plus <- dnorm(Z_values, mean = mu_plus, sd = sigma_plus)
# Créer un data frame pour ggplot
data <- data.frame(
Z = Z_values,
Density_Minus = density_minus,
Density_Plus = density_plus
)
# Créer le graphique avec ggplot2
ggplot(data, aes(x = Z)) +
geom_line(aes(y = Density_Minus, color = "Modèle moins (impact nul)"), size = 1) +
geom_line(aes(y = Density_Plus, color = "Modèle plus (impact positif)"), size = 1) +
scale_color_manual(values = c("Modèle moins (impact nul)" = "blue", "Modèle plus (impact positif)" = "red")) +
labs(title = "Comparaison des distributions des modèles plus et moins",
x = "Signal Z",
y = "Densité",
color = "Modèles") +
theme_minimal()
# Créer le graphique avec ggplot2
ggplot(data, aes(x = Z)) +
geom_line(aes(y = Density_Minus, color = "Modèle moins (impact nul)"), size = 1) +
geom_line(aes(y = Density_Plus, color = "Modèle + (signal > 0)"), size = 1) +
scale_color_manual(values = c("Modèle moins (impact nul)" = "blue", "Modèle - (Signal =< 0)" = "red")) +
labs(title = "Disjonction de cas",
x = "Signal Z",
y = "Densité",
color = "Modèles") +
theme_minimal()
# Créer le graphique avec ggplot2
ggplot(data, aes(x = Z)) +
geom_line(aes(y = Density_Minus, color = "Modèle - (impact nul)"), size = 1) +
geom_line(aes(y = Density_Plus, color = "Modèle + (signal > 0)"), size = 1) +
scale_color_manual(values = c("Modèle moins (impact nul)" = "blue", "Modèle - (Signal =< 0)" = "red")) +
labs(title = "Disjonction de cas",
x = "Signal Z",
y = "Densité",
color = "Modèles") +
theme_minimal()
# Créer le graphique avec ggplot2
ggplot(data, aes(x = Z)) +
geom_line(aes(y = Density_Minus, color = "Modèle - (Z =< 0)"), size = 1) +
geom_line(aes(y = Density_Plus, color = "Modèle + (Z > 0)"), size = 1) +
scale_color_manual(values = c("Modèle - (Z =< 0)" = "blue", "Modèle + (Z > 0)" = "red")) +
labs(title = "Disjonction de cas",
x = "Signal Z",
y = "Densité",
color = "Modèles") +
theme_minimal()
# Installer les packages si vous ne les avez pas encore
install.packages("DiagrammeR")
library(DiagrammeR)
# Créer un diagramme simple avec DiagrammeR
grViz("
digraph G {
# Définir les noeuds
node [shape = rectangle, style=filled, color=lightblue, fontname = Helvetica]
GO_Terms [label = 'GO Terms\nC_ij', shape = rectangle]
Logistic_Regression [label = 'Régression Logistique\n(logit(pi_i) = beta0 + sum(C_ij * beta_j))', shape = box]
pi_i [label = 'Probabilité pi_i\n(Appartenance à la cohorte significative)', shape = ellipse, color=yellow]
Z_i [label = 'Signal Z_i\n(Impact de la cohorte)', shape = ellipse, color=lightgreen]
# Définir les flèches (arcs)
GO_Terms -> Logistic_Regression
Logistic_Regression -> pi_i
pi_i -> Z_i
}
")
# Créer un diagramme simple avec DiagrammeR en ajustant l'équation
grViz("
digraph G {
# Définir les noeuds
node [shape = rectangle, style=filled, color=lightblue, fontname = Helvetica]
GO_Terms [label = 'GO Terms\nC_ij', shape = rectangle]
Logistic_Regression [label = 'Régression Logistique\nlogit(pi_i) = beta0 + sum(C_ij * beta_j)', shape = box, width=2.5]
pi_i [label = 'Probabilité pi_i\n(Appartenance à la cohorte significative)', shape = ellipse, color=yellow, width=2.5]
Z_i [label = 'Signal Z_i\n(Impact de la cohorte)', shape = ellipse, color=black, fontcolor=white, width=2.5]
# Définir les flèches (arcs)
GO_Terms -> Logistic_Regression
Logistic_Regression -> pi_i
pi_i -> Z_i
}
")
library("ggplot2")
library("dplyr")
library("GGally")
data <- read.table("data_S1.csv",header=TRUE,sep=",")
model.frame<- read.table("data.csv",header=TRUE,sep=",")
data_filtered<- data[data$year != 1994, ]
data_filtered2<- data_filtered[data_filtered$year != 2011, ]
ggplot(data_filtered2, aes(x = factor(year), y = biomass, fill = factor(year))) +
geom_violin(draw_quantiles = TRUE) +
geom_jitter(width = 0.1, alpha = 0.1) +
geom_smooth(aes(group = 1), method = "loess", color = "red", se = FALSE) + # Courbe lissée
theme_minimal() +
labs(x = "Year", y = "Biomasse (g/d)", fill = "Year")
ggplot(model.frame, aes(x = factor(year), y = temperature, fill = factor(year))) +
geom_violin() +
geom_jitter(width = 0.1, alpha = 0.1) + # Ajoute des points individuels
geom_smooth(aes(group = 1), method = "loess", color = "red", se = FALSE) + # Courbe lissée
theme_minimal() +
labs(x = "Année", y = "Tempérture", fill = "Année")
temperature_berlin_historic <- read.table("temperature_berlin_historic.csv", header=TRUE, quote="\"")
berlin_filtered <- temperature_berlin_historic[, c("Year", "Average")]
ggplot(berlin_filtered, aes(x = Year, y = Average)) +
geom_smooth(aes(group = 1), method = "loess", color = "red", se = FALSE)
colnames(data)[colnames(data) == "mean.daynr"] <- "daynr"
selected_data <- model.frame[, c("year", "temperature", "precipitation", "Nitrogen", "Light", "Arable.land", "Forest", "Grassland", "Water","ellenTemperature","daynr")]
biomass_data <- data[,c("biomass","year", "daynr")]
merged_data <- merge(selected_data, biomass_data, by = c("year",'daynr'))
# Regrouper par années et calculer les moyennes
summary_data <- merged_data %>%
group_by(year) %>%
summarize(
biomass = mean(biomass, na.rm = TRUE),
temperature = mean(temperature, na.rm = TRUE),
precipitation = mean(precipitation, na.rm = TRUE),
nitrogen = mean(Nitrogen, na.rm = TRUE),
light = mean(Light, na.rm = TRUE),
arable_land = mean(Arable.land, na.rm = TRUE),
forest = mean(Forest, na.rm = TRUE),
grassland = mean(Grassland, na.rm = TRUE),
water = mean(Water, na.rm = TRUE),
e_temp = mean(ellenTemperature, na.rm = TRUE)
)
#fonction pour évaluer la valeur de corrélation et crée couleur
custom_cor <- function(data, mapping, ...) {
# Extraire les noms des colonnes
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
# Calculer la corrélation
cor_val <- cor(x, y, use = "complete.obs")
# Créer un data frame contenant la corrélation
corr_data <- data.frame(
x = 1,
y = 1,
cor_val = cor_val
)
# Créer un graphique avec geom_tile et ajouter la valeur
ggplot(corr_data, aes(x = x, y = y, fill = cor_val)) +
geom_tile(color = "black") +  # Bordure des cases
scale_fill_gradient2(low = "red", mid = "white", high = "green",
midpoint = 0, limits = c(-1, 1)) +
geom_text(aes(label = sprintf("%.2f", cor_val)), color = "black", size = 6) +  # Ajouter les valeurs
theme_void() +  # Supprime les axes et fonds
labs(fill = "Correlation")
}
ggpairs(summary_data[, -1], # Exclure la colonne "year" si elle n'est pas catégorique
lower = list(continuous = "smooth"),
diag = list(continuous = "density"),
upper = list(continuous = custom_cor)) # Appliquer la fonction personnalisée
datas <- read.csv("parameters.txt", sep=",", header=T)
datas$parameter <- factor(datas$parameter, levels = datas$parameter)
ggplot(datas, aes(x = parameter, y = value)) +
geom_bar(stat = "identity", fill = "darkgreen") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Contribution of relevant parameters to insect biomass development", x = "Parameters", y = "Rate of change") +
theme_minimal()
renv
PubMed_Timeline_Results_by_Year <- read.csv2("~/Downloads/PubMed_Timeline_Results_by_Year.csv", sep="")
View(PubMed_Timeline_Results_by_Year)
PubMed_Timeline_Results_by_Year <- read.csv("~/Downloads/PubMed_Timeline_Results_by_Year.csv", dec=",")
View(PubMed_Timeline_Results_by_Year)
View(PubMed_Timeline_Results_by_Year)
# Charger les données depuis un fichier (adapte si tu as un CSV ou autre)
df <- PubMed_Timeline_Results_by_Year
# Prendre la première ligne comme noms de colonnes
colnames(df) <- df[1, ]
df <- df[-1, ]
# Convertir les colonnes en types appropriés
df$Year <- as.integer(df$Year)
df$Count <- as.integer(df$Count)
# Créer l'histogramme
library(ggplot2)
ggplot(df, aes(x = Year, y = Count)) +
geom_col() +
labs(title = "Nombre de recherches sur 'cancer metabolism' par année",
x = "Année",
y = "Nombre de recherches") +
theme_minimal()
# Convertir les colonnes en types appropriés
df$Year <- as.integer(df$Year)
# Prendre la première ligne comme noms de colonnes
as.data.frame(df)
colnames(df) <- df[1, ]
# Prendre la première ligne comme noms de colonnes
df <- as.data.frame(df)
colnames(df) <- df[1, ]
df <- df[-1, ]
# Convertir les colonnes en types appropriés
df$Year <- as.integer(df$Year)
View(PubMed_Timeline_Results_by_Year)
colnames(PubMed_Timeline_Results_by_Year) <- PubMed_Timeline_Results_by_Year[1, ]
PubMed_Timeline_Results_by_Year <- PubMed_Timeline_Results_by_Year[-1, ]
# Convertir les colonnes en types appropriés
PubMed_Timeline_Results_by_Year$Year <- as.integer(PubMed_Timeline_Results_by_Year$Year)
PubMed_Timeline_Results_by_Year$Count <- as.integer(PubMed_Timeline_Results_by_Year$Count)
stat <- read.csv("~/Downloads/PubMed_Timeline_Results_by_Year.csv")
View(stat)
ggplot(stat, aes(x = Year, y = Count)) +
geom_col() +
labs(title = "Nombre de recherches sur 'cancer metabolism' par année",
x = "Année",
y = "Nombre de recherches") +
theme_minimal()
ggplot(stat, aes(x = Year, y = Count)) +
geom_col() +
labs(title = "Nombre d'article correspondant à la recherche 'cancer metabolism' par année (PubMed)",
x = "Année",
y = "Nombre d'article") +
theme_minimal()
scfea <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/scfea_results_LiverSC_to_plot.csv")
rw <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/rw_results_LiverSC_to_plot.csv")
metaflux <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/metaflux_results_LiverSC_to_plot.csv")
compass <- read.csv("/Users/guillaumepetit/Desktop/IRCM_2025/General_prog/IRCM_Internship/compass.csv")
View(scfea)
View(rw)
View(metaflux)
View(compass)
########################################################################################################################################################################################################################################################
scfea <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/scfea_results_LiverSC_to_plot.csv")
rw <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/rw_results_LiverSC_to_plot.csv")
metaflux <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/metaflux_results_LiverSC_to_plot.csv")
compass <- read.csv("/Users/guillaumepetit/Desktop/IRCM_2025/General_prog/IRCM_Internship/compass.csv")
# Charger les bibliothèques nécessaires
library(pheatmap)
library(data.table)
library(gridExtra)
library(grid)
# 🟢 1. Assurer que l'ordre des lignes est identique pour les 3 matrices
# Trier les DataFrames par `CellType` pour garantir le même ordre
scfea <- scfea[order(scfea$CellType), ]
rw <- rw[order(rw$CellType), ]
metaflux <- metaflux[order(metaflux$CellType), ]
compass <- compass[order(compass$CellType), ]
# Supprimer les colonnes non numériques
scfea_matrix <- as.matrix(scfea[, !(colnames(scfea) %in% c("Cluster.", "CellType"))])
rw_matrix <- as.matrix(rw[, !(colnames(rw) %in% c("Cluster.", "CellType"))])
metaflux_matrix <- as.matrix(metaflux[, !(colnames(metaflux) %in% c("Cluster.", "CellType"))])
compass_matrix <- as.matrix(compass[, !(colnames(compass) %in% c("Cluster.", "CellType"))])
# Définir les `rownames` pour aligner les types cellulaires
rownames(scfea_matrix) <- scfea$CellType
rownames(rw_matrix) <- rw$CellType
rownames(metaflux_matrix) <- metaflux$CellType
rownames(compass_matrix) <- compass$CellType
# 🟢 2. Définir une échelle de couleur commune (basée sur les 3 matrices combinées)
all_values <- c(scfea_matrix, rw_matrix, metaflux_matrix)  # Récupérer toutes les valeurs
color_limits <- c(min(all_values, na.rm = TRUE), max(all_values, na.rm = TRUE))  # Min et Max communs
color_palette <- colorRampPalette(c("blue", "white", "red"))(100)  # Palette de couleurs
# 🟢 3. Générer les heatmaps avec la même échelle de couleur et le même ordre des lignes
heatmap1 <- pheatmap(scfea_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "scFEA",
fontsize_row = 8, fontsize_col = 8,
color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),  # Uniformiser les valeurs
cluster_cols = FALSE,  # Garde l'ordre des modules
cluster_rows = FALSE)  # Garde le clustering des CellType
heatmap2 <- pheatmap(rw_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "rw",
fontsize_row = 8, fontsize_col = 8,
color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,
cluster_rows = FALSE)
heatmap3 <- pheatmap(metaflux_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "MetaFlux",
fontsize_row = 8, fontsize_col = 8,
color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,
cluster_rows = FALSE)
heatmap4 <- pheatmap(compass_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "Compass",
fontsize_row = 8, fontsize_col = 8,
color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,
cluster_rows = FALSE)
# 🟢 4. Afficher les 3 heatmaps côte à côte
grid.arrange(heatmap1[[4]], heatmap2[[4]], heatmap3[[4]], heatmap4[[4]], ncol = 4)
scfea <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/scfea_results_LiverSC_to_plot.csv")
rw <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/rw_results_LiverSC_to_plot.csv")
metaflux <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/metaflux_results_LiverSC_to_plot.csv")
compass <- read.csv("/Users/guillaumepetit/Desktop/IRCM_2025/General_prog/IRCM_Internship/compass.csv")
# Charger les bibliothèques nécessaires
library(pheatmap)
library(data.table)
library(gridExtra)
library(grid)
# 🔹 1. Définir les modules et CellType à sélectionner
selected_modules <- c("M_1", "M_2","M_3","M_4","M_5","M_62","M_63","M_67","M_107", "M_167","M_168")  # Exemple de modules à afficher
selected_celltypes <- c(scfea$CellType)
# 🔹 2. Filtrer les DataFrames pour ne garder que les cellules et modules sélectionnés
filter_data <- function(df, selected_modules, selected_celltypes) {
df <- df[df$CellType %in% selected_celltypes, ]  # Garder seulement les CellType sélectionnés
df <- df[, c("CellType", selected_modules)]  # Garder seulement les modules sélectionnés
df <- df[order(df$CellType), ]  # Trier les CellType
return(df)
}
scfea_filtered <- filter_data(scfea, selected_modules, selected_celltypes)
rw_filtered <- filter_data(rw, selected_modules, selected_celltypes)
metaflux_filtered <- filter_data(metaflux, selected_modules, selected_celltypes)
compass_filtered <- filter_data(compass, selected_modules, selected_celltypes)
# 🔹 3. Convertir en matrices
scfea_matrix <- as.matrix(scfea_filtered[, -1])  # Supprimer la colonne CellType
rw_matrix <- as.matrix(rw_filtered[, -1])
metaflux_matrix <- as.matrix(metaflux_filtered[, -1])
compass_matrix <- as.matrix(compass_filtered[, -1])
# Assurer que l'ordre des lignes est le même
rownames(scfea_matrix) <- scfea_filtered$CellType
rownames(rw_matrix) <- rw_filtered$CellType
rownames(metaflux_matrix) <- metaflux_filtered$CellType
rownames(compass_matrix) <- compass_filtered$CellType
# 🔹 4. Définir une échelle de couleur commune
all_values <- c(scfea_matrix, rw_matrix, metaflux_matrix)  # Récupérer toutes les valeurs
color_limits <- c(min(all_values, na.rm = TRUE), max(all_values, na.rm = TRUE))  # Min et Max communs
color_palette <- colorRampPalette(c("blue", "white", "red"))(100)  # Palette de couleurs
# 🔹 5. Générer les heatmaps
heatmap1 <- pheatmap(scfea_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "scFEA",
fontsize_row = 10, fontsize_col = 10,
#color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,  # Garde l'ordre des modules
cluster_rows = FALSE)  # Garde le clustering des CellType
heatmap2 <- pheatmap(rw_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "rw",
fontsize_row = 10, fontsize_col = 10,
#color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,
cluster_rows = FALSE)
heatmap3 <- pheatmap(metaflux_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "MetaFlux",
fontsize_row = 10, fontsize_col = 10,
#color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,
cluster_rows = FALSE)
heatmap3 <- pheatmap(compass_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "Compass",
fontsize_row = 10, fontsize_col = 10,
#color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,
cluster_rows = FALSE)
# 🔹 6. Afficher les 3 heatmaps côte à côte
grid.arrange(heatmap1[[4]], heatmap2[[4]], heatmap3[[4]], heatmap4[[4]], ncol = 4)
scfea <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/scfea_results_LiverSC_to_plot.csv")
rw <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/rw_results_LiverSC_to_plot.csv")
metaflux <- read.csv("~/Desktop/IRCM_2025/General_prog/IRCM_Internship/metaflux_results_LiverSC_to_plot.csv")
compass <- read.csv("/Users/guillaumepetit/Desktop/IRCM_2025/General_prog/IRCM_Internship/compass.csv")
# Charger les bibliothèques nécessaires
library(pheatmap)
library(data.table)
library(gridExtra)
library(grid)
# 🔹 1. Définir les modules et CellType à sélectionner
selected_modules <- c("M_1", "M_2","M_3","M_4","M_5","M_62","M_63","M_67","M_107", "M_167","M_168")  # Exemple de modules à afficher
selected_celltypes <- c(scfea$CellType)
# 🔹 2. Filtrer les DataFrames pour ne garder que les cellules et modules sélectionnés
filter_data <- function(df, selected_modules, selected_celltypes) {
df <- df[df$CellType %in% selected_celltypes, ]  # Garder seulement les CellType sélectionnés
df <- df[, c("CellType", selected_modules)]  # Garder seulement les modules sélectionnés
df <- df[order(df$CellType), ]  # Trier les CellType
return(df)
}
scfea_filtered <- filter_data(scfea, selected_modules, selected_celltypes)
rw_filtered <- filter_data(rw, selected_modules, selected_celltypes)
metaflux_filtered <- filter_data(metaflux, selected_modules, selected_celltypes)
compass_filtered <- filter_data(compass, selected_modules, selected_celltypes)
# 🔹 3. Convertir en matrices
scfea_matrix <- as.matrix(scfea_filtered[, -1])  # Supprimer la colonne CellType
rw_matrix <- as.matrix(rw_filtered[, -1])
metaflux_matrix <- as.matrix(metaflux_filtered[, -1])
compass_matrix <- as.matrix(compass_filtered[, -1])
# Assurer que l'ordre des lignes est le même
rownames(scfea_matrix) <- scfea_filtered$CellType
rownames(rw_matrix) <- rw_filtered$CellType
rownames(metaflux_matrix) <- metaflux_filtered$CellType
rownames(compass_matrix) <- compass_filtered$CellType
# 🔹 4. Définir une échelle de couleur commune
all_values <- c(scfea_matrix, rw_matrix, metaflux_matrix)  # Récupérer toutes les valeurs
color_limits <- c(min(all_values, na.rm = TRUE), max(all_values, na.rm = TRUE))  # Min et Max communs
color_palette <- colorRampPalette(c("blue", "white", "red"))(100)  # Palette de couleurs
# 🔹 5. Générer les heatmaps
heatmap1 <- pheatmap(scfea_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "scFEA",
fontsize_row = 10, fontsize_col = 10,
#color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,  # Garde l'ordre des modules
cluster_rows = FALSE)  # Garde le clustering des CellType
heatmap2 <- pheatmap(rw_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "rw",
fontsize_row = 10, fontsize_col = 10,
#color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,
cluster_rows = FALSE)
heatmap3 <- pheatmap(metaflux_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "MetaFlux",
fontsize_row = 10, fontsize_col = 10,
#color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,
cluster_rows = FALSE)
heatmap4 <- pheatmap(compass_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "ward.D2",
main = "Compass",
fontsize_row = 10, fontsize_col = 10,
#color = color_palette,
breaks = seq(color_limits[1], color_limits[2], length.out = 101),
cluster_cols = FALSE,
cluster_rows = FALSE)
# 🔹 6. Afficher les 3 heatmaps côte à côte
grid.arrange(heatmap1[[4]], heatmap2[[4]], heatmap3[[4]], heatmap4[[4]], ncol = 4)
setwd("~/Desktop/IRCM_2025/Exp/CCLE")
setwd("~/Desktop/IRCM_2025/Exp/CCLE")
OmicsExpressionProteinCodingGenesTPMLogp1BatchCorrected <- read.csv("~/Desktop/IRCM_2025/Exp/OmicsExpressionProteinCodingGenesTPMLogp1BatchCorrected.csv", row.names=1)
View(OmicsExpressionProteinCodingGenesTPMLogp1BatchCorrected)
id_list <- read.table("~/Desktop/IRCM_2025/Exp/CCLE/id_list.txt", quote="\"", comment.char="")
View(id_list)
View(id_list)
data <- subset(data, rownames(data) == id_list )
data <- data[rownames(data) %in% id_list$V1, ]
data <- data[rownames(data) %in% id_list$V1, ]
data <- read.csv("../OmicsExpressionProteinCodingGenesTPMLogp1BatchCorrected.csv",
row.names=1)
data <- data[rownames(data) %in% id_list$V1, ]
View(data)
write.csv(data,file = RNA_seq_filtered)
write.csv( "RNA_seq_filtered.csv",file = data)
write.csv(data,"RNA_seq_filtered.csv")
rm(OmicsExpressionProteinCodingGenesTPMLogp1BatchCorrected)
library(readxl)
Name <- read_excel("NIHMS1033364-supplement-Supplementary_Tables_1__2__3__4.xlsx",
sheet = "1-cell line annotations")
View(Name)
Name_list <- Name$Name
name_lsit
Name_list
rm(Name)
rm(Name_list)
Model <- read.csv("~/Desktop/IRCM_2025/Exp/Model.csv")
View(Model)
# Vérification que les rownames de data sont bien des ModelID
all(rownames(data) %in% Model$ModelID)
# Création d’un vecteur de correspondance
name_mapping <- setNames(Model$StrippedCellLineName, Model$ModelID)
# Remplacement des rownames
rownames(data) <- name_mapping[rownames(data)]
# Vérification
head(rownames(data))
colnames(data) <- sub("\\..*", "", colnames(data))
write.csv(data,"RNA_seq_filtered.csv")
data[data < 0] <- 0
any(data < 0)
write.csv(data,"RNA_seq_filtered.csv")
